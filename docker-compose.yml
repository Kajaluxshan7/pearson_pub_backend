# =====================================================
# Backend Docker Compose for NestJS Application
# =====================================================

version: '3.8'

# Define network for service communication
networks:
  backend_network:
    driver: bridge

# Define persistent volumes for data storage
volumes:
  # PostgreSQL data persistence
  postgres_data:
    driver: local

  # Backend logs (optional - for log persistence)
  backend_logs:
    driver: local

# Service definitions
services:
  # ================================
  # PostgreSQL Database Service
  # ================================
  database:
    image: postgres:15-alpine
    container_name: pearson_backend_db
    restart: unless-stopped

    # Environment variables for PostgreSQL
    environment:
      POSTGRES_DB: ${DB_NAME:-pearson_pub}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8'

    # Volume mapping for data persistence
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Optional: Custom initialization scripts
      # - ./init-scripts:/docker-entrypoint-initdb.d

    # Port mapping (expose database port)
    ports:
      - '${DB_PORT:-5432}:5432'

    # Network configuration
    networks:
      - backend_network

    # Health check for database readiness
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-pearson_pub}',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

    # Security: Run as non-root user
    user: postgres

  # ================================
  # NestJS Backend Service
  # ================================
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      # Build arguments (if needed)
      args:
        NODE_ENV: production

    container_name: pearson_backend
    restart: unless-stopped

    # Environment variables
    environment:
      # Database configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-pearson_pub}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}

      # Application configuration
      NODE_ENV: production
      PORT: 5000

      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}

      # Email configuration (if using email features)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}

      # Google OAuth (if using Google authentication)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}

      # Application URLs
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3002}

    # Port mapping - Backend runs on port 5000
    ports:
      - '${BACKEND_PORT:-5000}:5000'

    # Volume mapping for logs
    volumes:
      - backend_logs:/app/logs

    # Network configuration
    networks:
      - backend_network

    # Service dependencies
    depends_on:
      database:
        condition: service_healthy

    # Health check for backend readiness
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:5000/health || exit 1',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
# ================================
# Development Override (Optional)
# ================================
# To use this compose file for development:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
